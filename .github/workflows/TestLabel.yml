name: Test Labeling PR

on:
  workflow_dispatch:
  pull_request_target:
      types: [opened, labeled, unlabeled, synchronize]
      branches:
        - main

permissions: {}

jobs:
  version-cal:
    if: ${{ !contains(github.event.pull_request.labels.*.name, 'skip-cal-version') && (!contains(fromJSON('["labeled", "unlabeled"]'), github.event.action) || github.event.label.name != 'release-version-block') }}
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
      contents: read
    steps:
      - name: Set Init Version Message
        env:
           action: ${{ toJSON(github.event.action) }}
           label: ${{ toJSON(github.event.label) }}
        run: |
          echo "message=$(echo 'Suggested init version: 1.0.0b1 for preview release and 1.0.0 for stable release')" >> $GITHUB_ENV
      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
           python-version: "3.10"
      - name: Checkout CLI extension repo
        uses: actions/checkout@master
        with:
          fetch-depth: 0 # checkout all branches
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}  # checkout pull request branch
      - name: Show workdirectory after site cloned
        run: |
           pwd
           ls
      - name: Get Diff Files
        env:
          bash_sha: ${{ github.event.pull_request.base.sha }}
          base_branch: ${{ github.event.pull_request.base.ref }}
          base_branch_pre: "upstream"
          diff_code_file: "diff_codes.txt"
          diff_sha: ${{ github.event.pull_request.head.sha }}
          diff_branch: ${{ github.event.pull_request.head.ref }}
          repo_full_name: ${{ github.event.pull_request.head.repo.full_name }}
        run: |
            set -x
            git --version
            git log --oneline | head -n 30
            git branch -a
            git fetch https://github.com/Azure/azure-cli-extensions.git "$base_branch":"$base_branch_pre"/"$base_branch"
            git checkout "$base_branch_pre"/"$base_branch"
            git log --oneline | head -n 30
            git checkout "$diff_branch"
            git log --oneline | head -n 30
            git --no-pager diff --name-only --diff-filter=ACMRT "$base_branch_pre"/"$base_branch"..."$diff_branch" > changed_files
            cat changed_files
            cat changed_files | grep azext_ | awk -F"azext_" '{print $1}'| awk -F"/" '{print $2}' | sort | uniq > changed_modules
            echo "changed_module_list=$(cat changed_files | grep azext_ | awk -F"azext_" '{print $1}'| awk -F"/" '{print $2}' | sort | uniq | xargs)" >> $GITHUB_ENV
            git --no-pager diff --diff-filter=ACMRT "$base_branch_pre"/"$base_branch"..."$diff_branch" > "$diff_code_file"
      - name: Display Diff Modules
        run: |
            for mod in "$changed_module_list"
            do
              echo changed module: "${mod}"
            done
      - name: Show workdirectory after cli cloned
        run: |
           pwd
           ls
      - name: Gen Base and Diff Metadata
        id: get_comment_message
        env:
          pr_label_list: ${{ toJson(github.event.pull_request.labels.*.name) }}
          base_branch: ${{ github.event.pull_request.base.ref }}
          base_branch_pre: "upstream"
          diff_code_file: "diff_codes.txt"
          diff_branch: ${{ github.event.pull_request.head.ref }}
          base_meta_path: "./base_meta/"
          diff_meta_path: "./diff_meta/"
          result_path: "./cal_result"
          output_file: "version_update.txt"
          add_labels_file: "labels_added.json"
          remove_labels_file: "labels_removed.txt"
        run: |
           set -ev
           # git checkout "$base_branch_pre"/"$base_branch"
           mkdir ${result_path}
           python scripts/ci/gen_labels.py
           # echo "commit_message=$(cat $output_file)" >> $GITHUB_ENV
           cat $add_labels_file
           cat $remove_labels_file
           cat $add_labels_file > $output_file
           cat $remove_labels_file >> $output_file
      - name: Archive production artifacts
        uses: actions/upload-artifact@v4
        with:
          name: version-cal-output
          path: |
            cal_result
            !cal_result/**/*.md
          retention-days: 1
  version-output:
    needs: version-cal
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read
    steps:
      - name: Set Init Version Message
        env:
           action: ${{ toJSON(github.event.action) }}
           label: ${{ toJSON(github.event.label) }}
        run: |
          echo "message=$(echo 'Suggested init version: 1.0.0b1 for preview release and 1.0.0 for stable release')" >> $GITHUB_ENV
      - name: Download version cal result
        uses: actions/download-artifact@v4
        with:
          name: cal_result
      - name: Show workdirectory after result downloaded
        run: |
           pwd
           ls
      - name: Comment on the pull request
        uses: mshick/add-pr-comment@v2
        with:
           repo-token: ${{ secrets.GITHUB_TOKEN }}
           message-id: versioncommentbot
           message-path: |
            version_update.txt
           message-failure: |
            Please refer to [Extension version schema](https://github.com/Azure/azure-cli/blob/release/doc/extensions/versioning_guidelines.md) to update release versions.
      - name: Add block release label
        run: |
          cat labels_added.json
          curl -X POST \
          "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/labels" \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -d @labels_added.json
      - name: Add block release label
        run: |
          for del_lab in `cat labels_removed.txt | sort | uniq | xargs`
          do 
             curl -X DELETE \
             "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/labels/${del_lab}" \
             -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}"
          done
  

